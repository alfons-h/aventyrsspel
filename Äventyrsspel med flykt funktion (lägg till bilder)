import time
import random

name = input("Vad heter du?--> ")

class Player:
    def __init__(self, name, lvl, hp, armor, gold):
        self.name = name.capitalize()
        self.hp = hp
        self.lvl = lvl
        self.armor = armor
        self.gold = gold
        
        print("""
              
              """)
        print("Välkommen " + self.name + " till grottkravlare.")
        self.showstats()
        
    def showstats(self):
        time.sleep(0.1)
        print()
        time.sleep(0.05)
        print("     Spelar Stats     ")
        time.sleep(0.05)
        print("══════════════════════")
        print(f"Player Name: {self.name}")
        time.sleep(0.05)
        print(f"Level: {self.lvl}")
        time.sleep(0.05)
        print(f"Player HP: {self.hp}")
        time.sleep(0.05)
        print(f"Armor: {self.armor}")
        time.sleep(0.05)
        print(f"Guld: {self.gold}")
        print("══════════════════════")

player = Player(name, 1, 100, 0, 5)

class Inventory:
    def __init__(self):
        self.items = {}  
        
    def add_item(self, item_name, quantity=1):
        if item_name in self.items:
            self.items[item_name] += quantity
        else:
            self.items[item_name] = quantity
        print(f"Lade till {quantity} {item_name} till inventariet")

    def remove_item(self, item_name, quantity=1):
        if item_name in self.items:
            if self.items[item_name] > quantity:
                self.items[item_name] -= quantity
                print(f"{quantity} {item_name} togs bort")
            elif self.items[item_name] == quantity:
                del self.items[item_name]
                print(f"{quantity} {item_name} togs bort och finns inte längre i inventariet")
            else:
                print(f"För få {item_name} för att ta bort. Bara {self.items[item_name]} är tillgängliga.")
        else:
            print(f"{item_name} hittades inte")

class Monster:
    def __init__(self, name, hp, lvl, bild, escape):
        self.name = name
        self.hp = hp
        self.lvl = lvl
        self.bild = bild
        # Bestäm flykttröskeln baserat på monsterets nivå
        self.escape_threshold = escape = 12 - self.lvl  # Lägre nivå = lättare att fly

    def __str__(self):
        return f"{self.name}: HP {self.hp}, Level {self.lvl}\n{self.bild}"

rat_img = r"""RÅTTA"""
scorpion_img = r"""SKORPION"""
slime_img = r"""SLIME"""
goblin_img = r"""TROLL"""
zombie_img = r"""ZOMBIE"""
ghost_img = r"""SPÖKE"""
vampire_img = r"""FLADDERMUS'"""
werewolf_img = r"""VARULV"""
dragon_img = r"""DRAKE"""

monsters = [
    Monster("Råtta", 3, 1, rat_img),
    Monster("Skorpion", 5, 2, scorpion_img),
    Monster("Slime", 10, 3, slime_img),
    Monster("Goblin", 25, 7, goblin_img),
    Monster("Zombie", 50, 10, zombie_img),
    Monster("Spöke", 75, 12, ghost_img),
    Monster("Vampyr", 100, 15, vampire_img),
    Monster("Varulv", 150, 20, werewolf_img),
    Monster("Drake", 500, 100, dragon_img)
]

def choose_door():
    print("Du står framför tre dörrar. Vilken vill du öppna?")
    time.sleep(1)
    print("1. Dörr 1")
    print("2. Dörr 2")
    print("3. Dörr 3")
    
    while True:
        choice = input("Skriv numret på dörren du vill öppna (1, 2 eller 3): ").strip()
        if choice in ["1", "2", "3"]:
            print(f"Du öppnar dörr {choice}...")
            time.sleep(2)
            return
        else:
            print("Ogiltigt val, försök igen.")


def get_custom_monster(name, monsters):
    for monster in monsters:
        if name.lower() == monster.name.lower():
            return monster
    return random.choice(monsters)

current_monster = get_custom_monster(name, monsters)

time.sleep(2)
print(current_monster) 
time.sleep(0.5)
print(f"Du stöter på level {current_monster.lvl} {current_monster.name}.")
time.sleep(0.5)
print(f"{current_monster.name} har {current_monster.hp} HP.")
time.sleep(2)


def monster_attack(player, current_monster):
    while current_monster.hp > 0 and player.hp > 0:
        # Monstrets attack
        damage = random.randint(2, 5) * current_monster.lvl // 2
        print(f"{current_monster.name} attackerar dig och gör {damage} skada!")
        time.sleep(1)
        player.hp = max(0, player.hp - damage)

        if player.hp > 0:
            print(f"Du överlever med {player.hp} HP kvar.")
        else:
            print("""DÖD""")
            exit()

        # Spelarens attack eller flykt
        svar = input("Vill du attackera eller försöka fly? (Svara 'attackera' eller 'fly'): ").strip().lower()
        if svar == "attackera":
            damage = random.randint(3, 4) * player.lvl * 2
            print(f"Du attackerar {current_monster.name} och gör {damage} skada!")
            time.sleep(1)
            current_monster.hp = max(0, current_monster.hp - damage)
            
            if current_monster.hp > 0:
                print(f"{current_monster.name} överlever med {current_monster.hp} HP kvar.")
            else:
                print(f"Du dödade {current_monster.name}, som droppar {current_monster.lvl} guld.")
                print(f"Du överlever med {player.hp} HP")
                player.gold += current_monster.lvl
                print(f"Du har nu {player.gold} guld.")
                break

        elif svar == "fly":
            # Försök att fly
            dice_roll = random.randint(1, 20)
            print(f"Du rullar tärningen för att försöka fly... (Du rullade {dice_roll})")
            if dice_roll > current_monster.escape_threshold:
                print(f"Du lyckades fly från {current_monster.name}!")
                break
            else:
                print(f"Du misslyckades att fly från {current_monster.name}.")
                print(f"{current_monster.name} attackerar dig igen.")
        else:
            print("Ogiltigt svar, monstret attackerar.")
            
monster_attack(player, current_monster)
